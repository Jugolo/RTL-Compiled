if(typeof strlen != "function")
  include "rtl.string";
if(typeof count != "function")
  include "rtl.array";
if(typeof numberInt != "function")
  include "rtl.typeconveter";
if(typeof rtl != "function")
  include "rtl";

global const sha1 = {
  global const SHIFT = [24, 16, 8, 0];
  global const EXTRA = [-2147483648, 8388608, 32768, 128];
  global const HEX = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
  
  struct SHA1{
    blocks,
    lastIndex,
    bytes,
    block,
    isHashed,
    a,
    b,
    c,
    d,
    e
  }

  function hex(SHA1 data){
    return HEX[(data.a >> 28) & 15] + HEX[(data.a >> 24) & 15] +
           HEX[(data.a >> 20) & 15] + HEX[(data.a >> 16) & 15] +
           HEX[(data.a >> 12) & 15] + HEX[(data.a >> 8) & 15] +
           HEX[(data.a >> 4) & 15]  + HEX[data.a & 15] +
           HEX[(data.b >> 28) & 15] + HEX[(data.b >> 24) & 15] +
           HEX[(data.b >> 20) & 15] + HEX[(data.b >> 16) & 15] +
           HEX[(data.b >> 12) & 15] + HEX[(data.b >> 8) & 15] +
           HEX[(data.b >> 4) & 15]  + HEX[data.b & 15] +
           HEX[(data.c >> 28) & 15] + HEX[(data.c >> 24) & 15] +
           HEX[(data.c >> 20) & 15] + HEX[(data.c >> 16) & 15] +
           HEX[(data.c >> 12) & 15] + HEX[(data.c >> 8) & 15] +
           HEX[(data.c >> 4) & 15]  + HEX[data.c & 15] +
           HEX[(data.d >> 28) & 15] + HEX[(data.d >> 24) & 15] +
           HEX[(data.d >> 20) & 15] + HEX[(data.d >> 16) & 15] +
           HEX[(data.d >> 12) & 15] + HEX[(data.d >> 8) & 15] +
           HEX[(data.d >> 4) & 15]  + HEX[data.d & 15] +
           HEX[(data.e >> 28) & 15] + HEX[(data.e >> 24) & 15] +
           HEX[(data.e >> 20) & 15] + HEX[(data.e >> 16) & 15] +
           HEX[(data.e >> 12) & 15] + HEX[(data.e >> 8) & 15] +
           HEX[(data.e >> 4) & 15]  + HEX[data.e & 15];
  }

  function hash(SHA1 data){
    for(j=16;j<80;j++){
      t = data.blocks[j-3] ^ data.blocks[j-8] ^ data.blocks[j-14] ^ data.blocks[j-16];
      data.blocks[j] = (t << 1) | (t >>> 31);
    }

    a = data.a;
    b = data.b;
    c = data.c;
    d = data.d;
    e = data.e;

    for(j = 0; j < 20; j += 5) {
      f = (b & c) | ((~b) & d);
      t = (a << 5) | (a >>> 27);
      e = (numberDouble(t + f + e) + 1518500249.0) + data.blocks[j] << 0;
      b = (b << 30) | (b >>> 2);

      f = (a & b) | ((~a) & c);
      t = (e << 5) | (e >>> 27);
      d = (numberDouble(t + f + d) + 1518500249.0) + data.blocks[j + 1] << 0;
      a = (a << 30) | (a >>> 2);

      f = (e & a) | ((~e) & b);
      t = (d << 5) | (d >>> 27);
      c = (numberDouble(t + f + c) + 1518500249.0) + data.blocks[j + 2] << 0;
      e = (e << 30) | (e >>> 2);

      f = (d & e) | ((~d) & a);
      t = (c << 5) | (c >>> 27);
      b = (numberDouble(t + f + b) + 1518500249.0) + data.blocks[j + 3] << 0;
      d = (d << 30) | (d >>> 2);

      f = (c & d) | ((~c) & e);
      t = (b << 5) | (b >>> 27);
      a = (numberDouble(t + f + a) + 1518500249.0) + data.blocks[j + 4] << 0;
      c = (c << 30) | (c >>> 2);
    }

    for(; j < 40; j = j+5) {
      f = b ^ c ^ d;
      t = (a << 5) | (a >>> 27);
      e = (numberDouble(t + f + e) + 1859775393.0) + data.blocks[j] << 0;
      b = (b << 30) | (b >>> 2);

      f = a ^ b ^ c;
      t = (e << 5) | (e >>> 27);
      d = (numberDouble(t + f + d) + 1859775393.0) + data.blocks[j + 1] << 0;
      a = (a << 30) | (a >>> 2);

      f = e ^ a ^ b;
      t = (d << 5) | (d >>> 27);
      c = (numberDouble(t + f + c) + 1859775393.0) + data.blocks[j + 2] << 0;
      e = (e << 30) | (e >>> 2);

      f = d ^ e ^ a;
      t = (c << 5) | (c >>> 27);
      b = (numberDouble(t + f + b) + 1859775393.0) + data.blocks[j + 3] << 0;
      d = (d << 30) | (d >>> 2);

      f = c ^ d ^ e;
      t = (b << 5) | (b >>> 27);
      a = (numberDouble(t + f + a) + 1859775393.0) + data.blocks[j + 4] << 0;
      c = (c << 30) | (c >>> 2);
    }

    for(; j < 60; j = j+5) {
      f = (b & c) | (b & d) | (c & d);
      t = (a << 5) | (a >>> 27);
      e = (numberDouble(t + f + e) - 1894007588.0) + data.blocks[j] << 0;
      b = (b << 30) | (b >>> 2);
      f = (a & b) | (a & c) | (b & c);
      t = (e << 5) | (e >>> 27);
      d = (numberDouble(t + f + d) - 1894007588.0) + data.blocks[j + 1] << 0;
      a = (a << 30) | (a >>> 2);

      f = (e & a) | (e & b) | (a & b);
      t = (d << 5) | (d >>> 27);
      c = (numberDouble(t + f + c) - 1894007588.0) + data.blocks[j + 2] << 0;
      e = (e << 30) | (e >>> 2);

      f = (d & e) | (d & a) | (e & a);
      t = (c << 5) | (c >>> 27);
      b = (numberDouble(t + f + b) - 1894007588.0) + data.blocks[j + 3] << 0;
      d = (d << 30) | (d >>> 2);

      f = (c & d) | (c & e) | (d & e);
      t = (b << 5) | (b >>> 27);
      a = (numberDouble(t + f + a) - 1894007588.0) + data.blocks[j + 4] << 0;
      c = (c << 30) | (c >>> 2);
    }

    for(; j < 80; j = j+5) {
      f = b ^ c ^ d;
      t = (a << 5) | (a >>> 27);
      e = (numberDouble(t + f + e) - 899497514.0) + data.blocks[j] << 0;
      b = (b << 30) | (b >>> 2);

      f = a ^ b ^ c;
      t = (e << 5) | (e >>> 27);
      d = (numberDouble(t + f + d) - 899497514.0) + data.blocks[j + 1] << 0;
      a = (a << 30) | (a >>> 2);

      f = e ^ a ^ b;
      t = (d << 5) | (d >>> 27);
      c = (numberDouble(t + f + c) - 899497514.0) + data.blocks[j + 2] << 0;
      e = (e << 30) | (e >>> 2);

      f = d ^ e ^ a;
      t = (c << 5) | (c >>> 27);
      b = (numberDouble(t + f + b) - 899497514.0) + data.blocks[j + 3] << 0;
      d = (d << 30) | (d >>> 2);

      f = c ^ d ^ e;
      t = (b << 5) | (b >>> 27);
      a = (numberDouble(t + f + a) - 899497514.0) + data.blocks[j + 4] << 0;
      c = (c << 30) | (c >>> 2);
    }
    
    data.a = data.a + a << 0;
    data.b = data.b + b << 0;
    data.c = data.c + c << 0;
    data.d = data.d + d << 0;
    data.e = data.e + e << 0;
  }

  function finish(SHA1 data){
    data.blocks[16] = data.block;
    data.blocks[data.lastIndex >> 2] = data.blocks[data.lastIndex >> 2] | EXTRA[data.lastIndex & 3];
    data.block = data.blocks[16];
    data.blocks[14] = 0 << 3 | data.bytes >>> 29;
    data.blocks[15] = data.bytes << 3;
    return hash(data);
  }

  return function(string message){
    data = struct SHA1;
    data.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    data.lastIndex = 0;
    data.bytes = 0;
    data.block = 0;
    data.isHashed = false;
    data.a = 1732584193;
    data.b = 4023233417;
    data.c = 2562383102;
    data.d = 271733878;
    data.e = 3285377520;
    length = strlen(message);
    start = 0;
    for(index=0;index<length;){
      if(data.isHashed){
        data.isHashed = false;
        data.blocks = [data.block, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      }
      for(i=start;index<length && i<64;index++){
        code = ord(strchar(message, index));
        if(code < 128){
          data.blocks[i >> 2] |= code << SHIFT[((i++)-1) & 3];
        }elseif(code < 2048){
          data.blocks[i >> 2] |= (192 | (code >> 6)) << SHIFT[((i++)-1) & 3];
          data.blocks[i >> 2] |= (128 | (code & 63)) << SHIFT[((i++)-1) & 3];
        }elseif(code < 55296 || code >= 57344){
          data.blocks[i >> 2] |= (224 | (code >> 12)) << SHIFT[((i++)-1) & 3];
          data.blocks[i >> 2] |= ((128 | (code >> 6) & 63)) << SHIFT[((i++)-1) & 3];
          data.blocks[i >> 2] |= (128 | (code & 63)) << SHIFT[((i++)-1) & 3];
        }else{
          code = 65536 + (((code & 1023) << 10) | (ord(strchar(message, ((index++)-1))) & 1023));
          data.blocks[i >> 2] |= (240 | (code >> 18)) << SHIFT[((i++)-1) & 3];
          data.blocks[i >> 2] |= (128 | ((code >> 12) & 63)) << SHIFT[((i++)-1) & 3];
          data.blocks[i >> 2] |= (128 | ((code >> 6) & 63)) << SHIFT[((i++)-1) & 3];
          data.blocks[i >> 2] |= (128 | (code & 63)) << SHIFT[((i++)-1) & 3];
        }
      }
      data.lastIndex = i;
      data.bytes += i - start;
      if(i >= 64){
        start = i - 64;
        data.block = data.blocks[16];
        hash(data);
        data.isHashed = true;
      }
    }
    finish(data);
    return hex(data);
  };
};

if(rtl().test){
  if(typeof asset != "function")
    include "rtl.test.asset";

  asset(sha1("hejsameddig") == "c3b16d78fb0643dc1761e1bcab6958c4ea505d9a", "[sha1]hejsameddig is not c3b16d78fb0643dc1761e1bcab6958c4ea505d9a");
  asset(sha1("hejsameddigæøå") == "422bfd0a57bb7bbf1b05fc1dfa5ef598de0d4980", "[sha1]hejsameddigæøå is not 422bfd0a57bb7bbf1b05fc1dfa5ef598de0d4980");
  asset(sha1("qwertyuiopasdfghjklzxcvbnmqwerqwertyuiopasdfghjklzxcvbnmqwer12345") == "c805e4ca5eb9f97882c6d867cf9dbfd3f74b502d", "[sha1] 3 test case failed");
  asset(sha1("qwertyuiopasdfghjklzxcvbnmqwerqwertyuiopasdfghjklzxcvbnmqwer12345 123456789123456789123456789") == "25e4b29fc58c5e130ed307290d54e95f16486f49", "[sha1] 4 test case failed");
}


