if(typeof hashmap != "function")
  include "rtl.hashmap";
if(typeof count != "function")
  include "rtl.array";
if(typeof toInt != "function")
  include "rtl.typeconveter";
if(typeof strlen != "function")
  include "rtl.string";

global const json_decode = {
  struct JSONDECODE{
    length,
    str,
    index
  }

  function string json_gc(JSONDECODE jd){
    while(true){
      c = strchar(jd.str, jd.index);
      if(!(c == " " || c == "\n" || c == "\r" || c == "\t"))
        return c;
      jd.index++;
    }
    return null;
  }

  function HASHMAP json_object(JSONDECODE jd){
    c = json_gc(jd);
    if(c == "}")
      return hashmap();
    obj = hashmap();
    while(true){
       if(!json_memberObject(jd, c, obj))
         return null;
       c = json_gc(jd);
       if(c != ",")
         break;
       jd.index++;
       c = json_gc(jd);
    }

    if(strchar(jd.str, jd.index) != "}"){
      return null;
    }
    jd.index++;
    return obj;
  }

  function bool json_memberObject(JSONDECODE jd, string c, HASHMAP hs){
    if(c != '"')
      return false;
    jd.index++;
    k = json_string(jd);
    if(json_gc(jd) != ':')
      return false;
    jd.index++;
    hashmap_put(hs, k, json_element(jd));
    return true;
  }

  function string json_string(JSONDECODE jd){
    str = "";
    while(true){
      c = strchar(jd.str, jd.index);
      jd.index++;
      if(c == '"'){
        return str;
      }
      if(c == '\n')
        return null;
      if(c == "\\"){
        prefix = strchar(jd.str, jd.index);
        if(prefix == "n"){
          str += "\n";
          jd.index++;
        }elseif(prefix == "r"){
          str += "\r";
          jd.index++;
        }elseif(prefix == "t"){
          str += "\t";
          jd.index++;
        }elseif(prefix == "\\"){
          str += "\\";
          jd.index++;
        }elseif(prefix == '"'){
          str += '"';
          jd.index++;
        }else{
          return null;
        }
      }else
        str += c;
    }
  }

  function array json_array(JSONDECODE jd){
    if(json_gc(jd) == "]"){
      jd.index++;
      return [];
    }

    array = [];
    while(true){
      array[] = json_element(jd);
      if(json_gc(jd) != ",")
        break;
      jd.index++;
    }

    if(strchar(jd.str, jd.index) != "]"){
      return null;
    }
    jd.index++;
    return array;
  }

  function number json_number(JSONDECODE jd){
    jd.index--;
    num = "";
    while(true){
      c = ord(strchar(jd.str, jd.index));
      if(c < 48 || c > 57)
        break;
      num += strchar(jd.str, jd.index);
      jd.index++;
    }
    return toInt(num);
  }

  function json_element(JSONDECODE jd){
    c = json_gc(jd);
    jd.index++;
    if(c == "{")
      return json_object(jd);
    if(c == '"')
      return json_string(jd);
    if(c == "[")
      return json_array(jd);
    if(c == 'n'){
      if(substr(jd.str, jd.index, 3) == "ull"){
        jd.index += 3;
        return null;
      }
    }
    if(c == 't'){
      if(substr(jd.str, jd.index, 3) == "rue"){
        jd.index += 3;
        return true;
      }
    }
    if(c == "f"){
      if(substr(jd.str, jd.index, 4) == "alse"){
        jd.index += 4;
        return false;
      }
    }

    a = ord(c);
    if(a >= 48 && a <= 57)
      return json_number(jd);
    
    println c+"("+a+")";
  }
   
  return function(string str){
    jd = struct JSONDECODE;
    jd.length = strlen(str);
    jd.str = str;
    jd.index = 0;

    if(jd.length == 0)
      return null;

    return json_element(jd);
  };
};

global const json_encode = {
  function string join(array array, string clue){
    length = count(array);
    if(length == 0)
      return "";
    r = array[0];
    for(i=1;i<length;i++)
      r = r+clue+array[i];
    return r;
  }

  function string json_string(obj){
    str = '"';
    length = strlen(obj);
    for(i=0;i<length;i++){
      c = strchar(obj, i);
      if(c == "\n")
       str += "\\n";
      elseif(c == "\r")
       str += "\\r";
      elseif(c == "\t")
       str += "\\t";
      elseif(c == "\\")
       str += "\\\\";
      elseif(c == '"')
       str += '\\"';
      else
       str += c;
    }
    return str+'"';
  }

  function string json_object(obj){
    global str = [];
    hashmap_for(obj, function(k,v){
      if(typeof k == "string"){
        str[] = json_string(k)+" : "+json_element(v);
      }
    });
    return "{"+join(str, ",")+"}";
  }

  function string json_array(obj){
    a = [];
    length = count(obj);
    for(i=0;i<length;i++)
      a[] = json_element(obj[i]);
    return "["+join(a, ",")+"]";
  }

  function string json_element(obj){
    type = typeof obj;
    if(type == "structValue"){
      if(obj._struct.name == "HASHMAP"){
        return json_object(obj);
      }
      return null;
    }elseif(type == "array"){
      return json_array(obj);
    }elseif(type == "string")
      return json_string(obj);
    elseif(type == "number")
      return obj+"";
    elseif(type == "null")
      return "null";
    else
      println type;
  }

  return json_element;
};