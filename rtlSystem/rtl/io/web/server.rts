if(typeof thread != "function")
  include "rtl.system.thread";
if(typeof tcpserver_open != "function")
  include "rtl.io.tcp.server";
if(typeof tcp_readln != "function")
  include "rtl.io.tcp.client";
if(typeof hashmap != "function")
  include "rtl.hashmap";
if(typeof str_split != "function")
  include "rtl.string";
if(typeof count != "function")
  include "rtl.array";
if(typeof file != "function")
  include "rtl.io.file";
if(typeof urldecode != "function")
  include "rtl.encode.url";
if(typeof toInt != "function")
  include "rtl.typeconveter";
if(typeof utcstring != "function")
  include "rtl.time";
if(typeof parseHTTPHeader != "function")
  include "rtl.io.web.http.header";


struct WEBSERVER{
  connection,
  isRunning,
  on404
}

struct WEBSERVER_REQUEST{
  type,
  header,
  connection,
  hasSentHeader,
  returnHeader,
  webserver,
  post,
  cookie
}

function WEBSERVER webserver_open(number port){
  data = struct WEBSERVER;
  data.isRunning = false;
  data.connection = tcpserver_open(port);
  return data;
}

function HASHMAP webserver_parseQuery(string query){
  buffer = hashmap();
  buf = str_split(query, "&");
  for(i=0;i<count(buf);i++){
    p = str_split(buf[i], "=");
    if(count(p) == 2)
      hashmap_put(buffer, urldecode(p[0]), urldecode(p[1]));
  }
  return buffer;
}

function webserver_parsePath(string path, HASHMAP hm){
  pos = strpos(path, "?");
  if(pos == -1){
    hashmap_put(hm, "path", path);
    hashmap_put(hm, "query", hashmap());
    return;
  }
  hashmap_put(hm, "path", substr(path, 0, pos));
  querystr = substr(path, pos+1, 0);
  if(querystr != "")
    hashmap_put(hm, "query", webserver_parseQuery(substr(path, pos+1, 0)));
  else
    hashmap_put(hm, "query", hashmap());
}

function webserver_on404(WEBSERVER_REQUEST webserver, function on404){
  if(typeof on404 == "function"){
    webserver.on404 = on404;
  }
}

//Change in version 1.1 add block
global const webserver_onConnect = {
  function handleCookie(WEBSERVER_REQUEST request){
    request.cookie = hashmap();
    if(hashmap_hasKey(request.header, "Cookie")){
      parts = str_split(hashmap_get(request.header, "Cookie"), "; ");
      for(i=0;i<count(parts);i++){
        pos = strpos(parts[i], "=");
        hashmap_put(request.cookie, substr(parts[i], 0, pos), urldecode(substr(parts[i], pos+1, 0)));
      }
    }
  }

  function handler(WEBSERVER webserver, function func){
    while(webserver.isRunning){
      client = tcpserver_accept(webserver.connection);
      line = tcp_readln(client);
      if(line == null){
        tcp_close(client);
        continue;//it should never happens but hey now we are safe :)
      }
      data = str_split(line, " ");
      if(count(data) != 3)
        continue;
      wr = struct WEBSERVER_REQUEST;
      wr.webserver = webserver;
      wr.connection = client;
      wr.hasSentHeader = false;
      wr.returnHeader = hashmap();
      hashmap_put(wr.returnHeader, "Connection", "close");
      hashmap_put(wr.returnHeader, "Content-Type", "text/plain");
      wr.type = hashmap();
      hashmap_put(wr.type, "type", data[0]);
      webserver_parsePath(data[1], wr.type);
      hashmap_put(wr.type, "version", data[2]);
      wr.header = parseHTTPHeader(client);
      if(wr.header == null)
        tcp_close(client);
      handleCookie(wr);
      wr.post = hashmap();
      if(hashmap_hasKey(wr.header, "Content-Type")){
        ct = hashmap_get(wr.header, "Content-Type");
        if(ct == "application/x-www-form-urlencoded"){
           if(hashmap_hasKey(wr.header, "Content-Length")){
             str = tcp_readLength(client, toInt(hashmap_get(wr.header, "Content-Length")));
           }else{
             str = "";
             while((line = tcp_readln(client)) != null)
               str = str+line;
           }

           base = str_split(str, "&");
           for(i=0;i<count(base);i++){
             part = str_split(base[i], "=");
             hashmap_put(wr.post, urldecode(part[0]), count(part) == 1 ? null : urldecode(part[1]));
           }
        }
      }
      func(wr);
      if(!wr.hasSentHeader){
        webserver_404(wr);
      }
    }
  }

  return function(WEBSERVER webserver, function func){
    global webserver;
    global func;
    webserver.isRunning = true;
    thread(function(){
      handler(webserver, func);
    });
  };
};

function webserver_setHeader(WEBSERVER_REQUEST request, string key, string value){
  hashmap_put(request.returnHeader, key, value);
}

global const webserver_getContentType = {
   const global c = hashmap();
   hashmap_put(c, "html",  "text/html");
   hashmap_put(c, "css",   "text/css");
   hashmap_put(c, "js",    "text/javascript");
   hashmap_put(c, "apng",  "image/apng");
   hashmap_put(c, "avif",  "image/avif");
   hashmap_put(c, "gif",   "image/gif");
   hashmap_put(c, "jpg",   "image/jpeg");
   hashmap_put(c, "jpeg",  "image/jpeg");
   hashmap_put(c, "jfif",  "image/jpeg");
   hashmap_put(c, "pjpeg", "image/jpeg");
   hashmap_put(c, "pjp",   "image/jpeg");
   hashmap_put(c, "png",   "image/png");
   hashmap_put(c, "svg",   "image/svg+xml");
   hashmap_put(c, "web",   "image/webp");

   return function string(f, string default){
     name = file_path(f);
     pos = strlpos(name, ".");
     if(pos == -1)
       return default;
     name = substr(name, pos+1, 0);
     if(hashmap_hasKey(c, name))
       return hashmap_get(c, name);
     return default;
   };
};

function webserver_sendHeader(WEBSERVER_REQUEST request, string type, string str){
  if(request.hasSentHeader){
    return;
  }

  request.hasSentHeader = true;
  tcp_writeln(request.connection, hashmap_get(request.type, "version")+" "+type+" "+str);
  global request;
  hashmap_for(request.returnHeader, function(name, value){
    tcp_writeln(request.connection, name+": "+value);
  });
  tcp_writeln(request.connection, "");
  tcp_flush(request.connection);
}

function webserver_startChunk(WEBSERVER_REQUEST request, string type, string str){
  webserver_setHeader(request, "Transfer-Encoding", "chunked");
  webserver_sendHeader(request, type, str);
}

function webserver_sendString(WEBSERVER_REQUEST request, string str){
  if(!hashmap_hasKey(request.returnHeader, "Transfer-Encoding") || hashmap_get(request.returnHeader, "Transfer-Encoding") != "chunked"){
    return "";
  }
  tcp_writeln(request.connection, int2hex(strlen(str)));
  tcp_writeln(request.connection, str);
  tcp_flush(request.connection);
}

function webserver_close(WEBSERVER_REQUEST request){
  if(hashmap_hasKey(request.returnHeader, "Transfer-Encoding") && hashmap_get(request.returnHeader, "Transfer-Encoding") == "chunked"){
    tcp_writeln(request.connection, "0");
    tcp_writeln(request.connection, "");
    tcp_flush(request.connection);
  }
  tcp_close(request.connection);
}

function webserver_sendBody(WEBSERVER_REQUEST request, string body){
  tcp_write(request.connection, body);
  tcp_close(request.connection);
}

function string webserver_path(WEBSERVER_REQUEST request){
  return hashmap_get(request.type, "path");
}

function string webserver_ip(WEBSERVER_REQUEST request){
  return tcp_ip(request.connection);
}

function webserver_404(WEBSERVER_REQUEST request){
  if(typeof request.webserver.on404 == "function" && !request.webserver.on404(request))
    return;
  webserver_sendHeader(request, "404", "not found");
  webserver_sendBody(request, "Sorry the requested page could not be found...");
}

const global webserver_sendFile = {
  function webserver_getFileContent(WEBSERVER_REQUEST request, f, string ct){
    if(strpos(ct, "image/") == 0){
       webserver_setHeader(request, "Accept-Ranges", "bytes");
       return file_readBytes(f, 0, file_size(f));
    }
    return file_readLength(f, 0, file_size(f));
  }

  return function(WEBSERVER_REQUEST request, f){
    if(f == null){
      webserver_404(request);
      return;
    }
    //okay let make some importen header...
    contenttype = webserver_getContentType(f, "text/plain");
    webserver_setHeader(request, "Content-Length", file_size(f)+"");
    webserver_setHeader(request, "Content-Type", contenttype);
    context = webserver_getFileContent(request, f, contenttype);
    webserver_sendHeader(request, "200", "ok");
    if(typeof context == "string")
      tcp_write(request.connection, context);
    else
      tcp_writeBytes(request.connection, context);
    tcp_flush(request.connection);
  };
};

function bool webserver_hasQuery(WEBSERVER_REQUEST request, string key){
  return hashmap_hasKey(hashmap_get(request.type, "query"), key);
}

function string webserver_getQuery(WEBSERVER_REQUEST request, string key){
  return hashmap_get(hashmap_get(request.type, "query"), key);
}

function bool webserver_hasRequestHeader(WEBSERVER_REQUEST request, string key){
  return hashmap_hasKey(request.header, key);
}

function string webserver_getRequestHeader(WEBSERVER_REQUEST request, string key){
  return hashmap_get(request.header, key);
}

function bool webserver_hasPost(WEBSERVER_REQUEST request, string key){
  return hashmap_hasKey(request.post, key);
}

function string webserver_getPost(WEBSERVER_REQUEST request, string key){
  return hashmap_get(request.post, key);
}

function bool webserver_hasCookie(WEBSERVER_REQUEST request, string key){
  return hashmap_hasKey(request.cookie, key);
}

function string webserver_getCookie(WEBSERVER_REQUEST request, string key){
  return hashmap_get(request.cookie, key);
}

function webserver_setCookie(WEBSERVER_REQUEST request, string key, string value, number exp){
  webserver_setHeader(request, "Set-Cookie", key+"="+urlencode(value)+"; Expires="+utcstring(exp));
}
