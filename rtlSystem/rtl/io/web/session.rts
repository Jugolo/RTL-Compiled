if(typeof current_time != "function")
  include "rtl.time";
if(typeof webserver_hasCookie != "function")
  include "rtl.io.web.server";
if(typeof chr != "function")
  include "rtl.string";
if(typeof rand != "function")
  include "rtl.math.rand";
if(typeof dir != "function")
  include "rtl.io.dir";
if(typeof json_encode != "function")
  include "rtl.encode.json";

struct SESSION{
  id,
  item
}

global const session_gc = {
  function string getName(f){
    path = file_path(f);
    return substr(path, strlpos(path, "/")+1, 0);
  }

  return function(){
    item = dir_item(dir("./sessions/"));
    for(i=0;i<count(item);i++){
      if(is_file(item[i])){
        if(getName(item[i]) == "_data.json")
          continue;

        if(file_modified(item[i])+86400 < current_time().now)
          file_delete(item[i]);
      }
    }
  };
};

function SESSION session_init(WEBSERVER_REQUEST request){
  session = struct SESSION;
  d = dir("./sessions/");
  if(!dir_exists(d))
    dir_create(d);
  if(!webserver_hasCookie(request, "session")){
    ns = "";
    for(i=0;i<20;i++)
      ns = ns+chr(rand(97, 122));
    webserver_setCookie(request, "session", ns, current_time().now + 99999999999);
    session.id = ns;
    //let us make a textfile in the cookie folder...
    session.item = struct HASHMAP;
  }else{
    session.id = webserver_getCookie(request, "session");
    if(file_exists("./sessions/"+session.id+".session")){
      f = file("./sessions/"+session.id+".session", "r");
      session.item = json_decode(file_readLength(f, 0, file_size(f)));
    }else{
      session.item = struct HASHMAP;
    }
  }

  if(!file_exists("./sessions/_data.json")){
    f = file("./sessions/_data.json", "rw");
    file_write(f, '{"next_gc" : '+(current_time().now+86400)+'}');
  }else{
    f = file("./sessions/_data.json", "rw");
    d = json_decode(file_readLength(f, 0, file_size(f)));
    if(d.next_gc < current_time().now || true){
      session_gc();
      file_setLength(f, 0);
      file_write(f, '{"next_gc" : '+(current_time().now+86400)+'}');
    }
  }
 
  return session;
}

function bool session_hasKey(SESSION session, string name){
  return hashmap_hasKey(session.item, name); 
}

function session_get(SESSION session, string name){
  return session.item[name];
}

function session_set(SESSION session, string name, value){
  session.item[name] = value;
} 

function session_flush(SESSION session){
  //open the file
  f = file("./sessions/"+session.id+".session", "rw");
  file_write(f, json_encode(session.item));
}